<!DOCTYPE html>
<html>
<head>
  <title>Task Manager</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    :root {
      --primary: #3b82f6;
      --primary-dark: #2563eb;
      --surface: #1e293b;
      --background: #0f172a;
      --text: #f1f5f9;
      --text-secondary: #cbd5e1;
      --border: #334155;
      --success: #10b981;
      --pending: #f59e0b;
    }

    body {
      min-height: 100vh;
      background: var(--background);
      color: var(--text);
      padding: 40px 20px;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(59, 130, 246, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(59, 130, 246, 0.1) 0%, transparent 20%);
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
    }

    .header {
      text-align: center;
      margin-bottom: 40px;
      position: relative;
    }

    h1 {
      font-size: 2.5em;
      font-weight: 700;
      margin-bottom: 20px;
      background: linear-gradient(90deg, var(--primary), #60a5fa);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .create-button {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 12px 24px;
      background: var(--primary);
      color: white;
      text-decoration: none;
      border-radius: 12px;
      font-weight: 600;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
    }

    .create-button:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(59, 130, 246, 0.4);
    }

    .task-list {
      list-style: none;
      display: grid;
      gap: 20px;
    }

    .task-item {
      background: var(--surface);
      border-radius: 16px;
      padding: 20px;
      border: 1px solid var(--border);
      position: relative;
      transition: all 0.3s ease;
      overflow: hidden;
    }

    .task-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .task-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--primary), #60a5fa);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .task-item:hover::before {
      opacity: 1;
    }

    .task-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 12px;
    }

    .task-title {
      font-size: 1.2em;
      font-weight: 600;
      color: var(--text);
    }

    .task-description {
      color: var(--text-secondary);
      margin-bottom: 16px;
      line-height: 1.5;
    }

    .task-actions {
      display: flex;
      gap: 12px;
      margin-top: 16px;
    }

    .task-action {
      padding: 8px 16px;
      border-radius: 8px;
      text-decoration: none;
      font-size: 0.9em;
      font-weight: 500;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 6px;
    }

    .edit-action {
      background: var(--primary);
      color: white;
    }

    .edit-action:hover {
      background: var(--primary-dark);
    }

    .delete-action {
      background: #ef4444;
      color: white;
    }

    .delete-action:hover {
      background: #dc2626;
    }

    .complete-action {
      background: var(--success);
      color: white;
    }

    .complete-action:hover {
      background: #059669;
    }

    .status-badge {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85em;
      font-weight: 500;
    }

    .status-completed {
      background: rgba(16, 185, 129, 0.2);
      color: var(--success);
    }

    .status-pending {
      background: rgba(245, 158, 11, 0.2);
      color: var(--pending);
    }

    @media (max-width: 640px) {
      .task-actions {
        flex-direction: column;
      }

      .task-action {
        width: 100%;
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Task Manager</h1>
      <a href="/create" class="create-button">
        <i class="fas fa-plus"></i>
        Create New Task
      </a>
    </div>

    <ul class="task-list">
      <% tasks.forEach(task => { %>
        <li class="task-item">
          <div class="task-header">
            <strong class="task-title"><%= task.title %></strong>
            <span class="status-badge <%= task.completed ? 'status-completed' : 'status-pending' %>">
              <i class="fas <%= task.completed ? 'fa-check-circle' : 'fa-clock' %>"></i>
              <%= task.completed ? 'Completed' : 'Pending' %>
            </span>
          </div>
          <p class="task-description"><%= task.description %></p>
          <div class="task-actions">
            <a href="/edit/<%= task.id %>" class="task-action edit-action">
              <i class="fas fa-edit"></i>
              Edit
            </a>
            <a href="/delete/<%= task.id %>" class="task-action delete-action">
              <i class="fas fa-trash"></i>
              Delete
            </a>
            <% if (!task.completed) { %>
              <a href="/complete/<%= task.id %>" class="task-action complete-action">
                <i class="fas fa-check"></i>
                Mark as Completed
              </a>
            <% } %>
          </div>
        </li>
      <% }) %>
    </ul>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Add hover animation for task items
      const taskItems = document.querySelectorAll('.task-item');
      taskItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-2px)';
        });
        
        item.addEventListener('mouseleave', function() {
          this.style.transform = 'translateY(0)';
        });
      });

      // Add confirmation for delete action
      const deleteButtons = document.querySelectorAll('.delete-action');
      deleteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          if (!confirm('Are you sure you want to delete this task?')) {
            e.preventDefault();
          }
        });
      });
    });
  </script>
</body>
</html>